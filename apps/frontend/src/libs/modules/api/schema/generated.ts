/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/auth/me": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get current logged-in user */
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: {
				/** @description Current user retrieved successfully */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["User"];
					};
				};
			};
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/login": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Login user */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["UserSignInRequestDto"];
				};
			};
			responses: {
				/** @description Login successful */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["AuthResponse"];
					};
				};
				401: components["responses"]["UnauthorizedError"];
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/register": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Sign up a new user */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["UserSignUpRequestDto"];
				};
			};
			responses: {
				/** @description Successful operation */
				201: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["AuthResponse"];
					};
				};
				400: components["responses"]["BadRequestError"];
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/plans/generate": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Generate a plan based on quiz answers */
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody: {
				content: {
					"application/json": components["schemas"]["QuizAnswersRequestDto"];
				};
			};
			responses: {
				/** @description Plan generated successfully */
				200: {
					headers: {
						[name: string]: unknown;
					};
					content: {
						"application/json": components["schemas"]["PlanDaysTaskDto"];
					};
				};
				400: components["responses"]["BadRequestError"];
			};
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/plans/:userId": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: never;
		};
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/plans/:planId/days/:dayId/tasks/:taskId/regenerate": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post: {
			parameters: {
				query?: never;
				header?: never;
				path?: never;
				cookie?: never;
			};
			requestBody?: never;
			responses: never;
		};
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		User: {
			id: number;
			/** Format: email */
			email: string;
			name: string;
		};
		UserSignInRequestDto: {
			/** Format: email */
			email: string;
			password: string;
		};
		AuthResponse: {
			token: string;
			user: components["schemas"]["User"];
		};
		Error: {
			message: string;
			errorType: string;
		};
		UserSignUpRequestDto: {
			/** Format: email */
			email: string;
			name: string;
			/** Format: password */
			password: string;
		};
		QuizAnswer: {
			isSkipped: boolean;
			questionId: number;
			questionText: string;
			selectedOptions: (string | number)[];
			userInput: string;
		};
		QuizAnswersRequestDto: {
			answers: components["schemas"]["QuizAnswer"][];
			/** @enum {string} */
			category: "creativity" | "fitness" | "health" | "nutrition";
			notes: string;
		};
		PlanDto: {
			id?: number;
			title?: string;
			duration?: number;
			intensity?: string;
			userId?: number;
		};
		TaskDto: {
			id?: number;
			title?: string;
			description?: string;
			order?: number;
			isCompleted?: boolean;
			executionTimeType?: string;
			completedAt?: string | null;
		};
		PlanDayDto: {
			id?: number;
			dayNumber?: number;
			tasks?: components["schemas"]["TaskDto"][];
		};
		PlanDaysTaskDto: components["schemas"]["PlanDto"] & {
			days?: components["schemas"]["PlanDayDto"][];
		};
	};
	responses: {
		/** @description Unauthorized */
		UnauthorizedError: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				"application/json": components["schemas"]["Error"];
			};
		};
		/** @description Bad request */
		BadRequestError: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				"application/json": components["schemas"]["Error"];
			};
		};
	};
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
